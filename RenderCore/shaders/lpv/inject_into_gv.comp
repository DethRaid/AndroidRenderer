#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_GOOGLE_include_directive : enable

#include "shared/lpv.hpp"
#include "shared/primitive_data.hpp"

layout(set = 0, binding = 0, std430) uniform LpvCascadesBuffer {
     LPVCascadeMatrices cascade_matrices[4];
} cascade_matrices_buffer;

layout(set = 0, binding = 1, scalar) uniform PrimitiveIdBuffer {
    uint primitive_ids[65536];
} primitive_id_buffer;

layout(set = 0, binding = 2, std430) readonly buffer PrimitiveDataBuffer {
    PrimitiveDataGPU primitive_datas[];
} primitive_data_buffer;

layout(set = 0, binding = 3, rgba16f) uniform image3D geometry_volume;

layout(set = 0, binding = 4) uniform sampler3D voxel_textures[];

layout(push_constant) uniform Constants {
    uint num_primitives;
    uint cascade_index;
    uint padding2;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
} push_constants;

// x should be one subgroup
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint local_offset = gl_SubgroupInvocationID;

    LPVCascadeMatrices cascade_matrices = cascade_matrices_buffer.cascade_matrices[push_constants.cascade_index];

    vec3 cascade_position_normalized = vec3(gl_WorkGroupID) / vec3(gl_NumWorkGroups);
    vec4 worldspace_position = cascade_matrices.cascade_to_world * vec4(cascade_position_normalized, 1.f);

    mat4 bias_mat = mat4(
        0.5, 0.0, 0.0, 0.0,
        0.0, 0.5, 0.0, 0.0,
        0.0, 0.0, 0.5, 0.0,
        0.5, 0.5, 0.5, 0.0
    );
    
    vec4 local_sh = vec4(0);

    for(uint block_start = 0; block_start < push_constants.num_primitives; block_start += gl_SubgroupSize) {
        uint current_index = block_start + local_offset;
        if(current_index >= push_constants.num_primitives) {
            continue;
        }

        uint primitive_id = primitive_id_buffer.primitive_ids[current_index];
        PrimitiveDataGPU primitive_data = primitive_data_buffer.primitive_datas[primitive_id];
        vec4 sample_position = bias_mat * primitive_data.inverse_model * worldspace_position;

        local_sh += textureLod(voxel_textures[nonuniformEXT(current_index)], sample_position.xyz, 0);
    }

    subgroupBarrier();

    local_sh = subgroupAdd(local_sh);

    if(subgroupElect()) {
        vec4 sh = imageLoad(geometry_volume, ivec3(gl_WorkGroupID));
        sh += local_sh;
        imageStore(geometry_volume, ivec3(gl_WorkGroupID), local_sh);
    }
}
