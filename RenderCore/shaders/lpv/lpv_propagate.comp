#version 460

#extension GL_GOOGLE_include_directive : enable

#include "shared/prelude.h"
#include "common/spherical_harmonics.glsl"

// Propagation scheme from https://ericpolman.com/2016/06/28/light-propagation-volumes/

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) uniform readonly image3D read_lpv_red;
layout(set = 0, binding = 1, rgba16f) uniform readonly image3D read_lpv_green;
layout(set = 0, binding = 2, rgba16f) uniform readonly image3D read_lpv_blue;
layout(set = 0, binding = 3, rgba16f) uniform writeonly image3D write_lpv_red;
layout(set = 0, binding = 4, rgba16f) uniform writeonly image3D write_lpv_green;
layout(set = 0, binding = 5, rgba16f) uniform writeonly image3D write_lpv_blue;

layout(set = 0, binding = 6) uniform sampler3D geo_volume;

layout(push_constant) uniform Constants {
    uint cascade_index;
    uint use_gv;
    uint padding2;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
};

const mediump mat3 neighbour_orientations[6] = mat3[](
        // Z+
        mat3(1, 0, 0, 0, 1, 0, 0, 0, 1),
        // Z-
        mat3(-1, 0, 0, 0, 1, 0, 0, 0, -1),
        // X+
        mat3(0, 0, 1, 0, 1, 0, -1, 0, 0),
        // X-
        mat3(0, 0, -1, 0, 1, 0, 1, 0, 0),
        // Y+
        mat3(1, 0, 0, 0, 0, 1, 0, -1, 0),
        // Y-
        mat3(1, 0, 0, 0, 0, -1, 0, 1, 0)
    );

const mediump vec3 directions[] = vec3[](vec3(0,0,1), vec3(0,0,-1), vec3(1,0,0), vec3(-1,0,0) , vec3(0,1,0), vec3(0,-1,0));

// right up
mediump vec2 side[4] = vec2[]( vec2(1.0, 0.0), vec2(0.0, 1.0), vec2(-1.0, 0.0), vec2(0.0, -1.0) );

// orientation = [ right | up | forward ] = [ x | y | z ]
mediump vec3 get_eval_side_direction(uint index, mediump mat3 orientation) {
    const mediump float smallComponent = 0.4472135; // 1 / sqrt(5)
    const mediump float bigComponent = 0.894427; // 2 / sqrt(5)

    const mediump vec2 s = side[index];
    // *either* x = 0 or y = 0
    return orientation * vec3(s.x * smallComponent, s.y * smallComponent, bigComponent);
}

mediump vec3 get_reproj_side_direction(uint index, mediump mat3 orientation) {
    const mediump vec2 s = side[index];
    return orientation * vec3(s.x, s.y, 0);
}

void main() {
    ivec3 cell = ivec3(gl_GlobalInvocationID);
    
    ivec3 cascade_offset = int(cascade_index) * ivec3(32, 0, 0);

    mediump vec4 red_data = vec4(0);
    mediump vec4 green_data = vec4(0);
    mediump vec4 blue_data = vec4(0);

    for (uint neighbor = 0; neighbor < 6; neighbor++) {
        mediump mat3 orientation = neighbour_orientations[neighbor];

        mediump vec3 main_direction = orientation * vec3(0, 0, 1);

        ivec3 neighbor_cell = cell - ivec3(directions[neighbor]);
        if(any(lessThan(neighbor_cell, ivec3(-1))) || any(greaterThan(neighbor_cell, ivec3(31)))) {
            continue;
        }

        mediump vec4 gv_sh = vec4(0);
        if(use_gv != 0) {
            vec3 gv_coordinate = vec3(neighbor_cell) / 32.f;
            // Add a half-cell offset to the GV
            gv_coordinate += 0.5f / 32.f;
            
            gv_coordinate.x += cascade_index;
            gv_coordinate.x /= 4.f;

            gv_sh = textureLod(geo_volume, gv_coordinate, 0);
        }

        mediump vec4 red_coefficients = imageLoad(read_lpv_red, neighbor_cell + cascade_offset);
        mediump vec4 green_coefficients = imageLoad(read_lpv_green, neighbor_cell + cascade_offset);
        mediump vec4 blue_coefficients = imageLoad(read_lpv_blue, neighbor_cell + cascade_offset);

        const mediump float direct_face_subtended_solid_angle = 0.4006696846f / PI / 2.f;
        const mediump float side_face_subtended_solid_angle = 0.4234413544f / PI / 3.f;

        for (uint side_face = 0; side_face < 4; side_face++) {
            mediump vec3 eval_direction = get_eval_side_direction(side_face, orientation);
            mediump vec3 reproj_direction = get_reproj_side_direction(side_face, orientation);

            mediump vec4 eval_direction_sh = dir_to_sh(eval_direction);
            mediump vec4 reproj_direction_cosine_lobs_sh = dir_to_cosine_lobe(reproj_direction);

            mediump float geo_volume_factor = 1.0 - clamp(gv_sh.x * eval_direction_sh.x + abs(dot(gv_sh.yzw, eval_direction_sh.yzw)), 0.0, 1.0);

            red_data += side_face_subtended_solid_angle * dot(red_coefficients, eval_direction_sh) * reproj_direction_cosine_lobs_sh * geo_volume_factor;
            green_data += side_face_subtended_solid_angle * dot(green_coefficients, eval_direction_sh) * reproj_direction_cosine_lobs_sh * geo_volume_factor;
            blue_data += side_face_subtended_solid_angle * dot(blue_coefficients, eval_direction_sh) * reproj_direction_cosine_lobs_sh * geo_volume_factor;
        }

        mediump vec3 cur_direction = directions[neighbor];
        mediump vec4 cur_cosine_lobe = dir_to_cosine_lobe(cur_direction);
        mediump vec4 cur_direction_sh = dir_to_sh(cur_direction);

        mediump float geo_volume_factor = 1.0 - clamp(gv_sh.x * cur_direction_sh.x + abs(dot(gv_sh.yzw, cur_direction_sh.yzw)), 0.0, 1.0);

        red_data += direct_face_subtended_solid_angle * dot(red_coefficients, cur_direction_sh) * cur_cosine_lobe * geo_volume_factor;
        green_data += direct_face_subtended_solid_angle * dot(green_coefficients, cur_direction_sh) * cur_cosine_lobe * geo_volume_factor;
        blue_data += direct_face_subtended_solid_angle * dot(blue_coefficients, cur_direction_sh) * cur_cosine_lobe * geo_volume_factor;
    }

    red_data += imageLoad(read_lpv_red, cell + cascade_offset);
    green_data += imageLoad(read_lpv_green, cell + cascade_offset);
    blue_data += imageLoad(read_lpv_blue, cell + cascade_offset);
    
    imageStore(write_lpv_red, cell + cascade_offset, red_data);
    imageStore(write_lpv_green, cell + cascade_offset, green_data);
    imageStore(write_lpv_blue, cell + cascade_offset, blue_data);
}
