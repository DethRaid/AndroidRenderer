#version 460 

#extension GL_GOOGLE_include_directive : enable

#include "sky/common.glsl"

layout(set = 0, binding = 0, rgba16f) uniform image2D transmittance_lut;

// Buffer A generates the Transmittance LUT. Each pixel coordinate corresponds to a height and sun zenith angle, and
// the value is the transmittance from that point to sun, through the atmosphere.
const float sunTransmittanceSteps = 40.0;

vec3 getSunTransmittance(vec3 pos, vec3 sunDir)
{
    if (rayIntersectSphere(pos, sunDir, groundRadiusMM) > 0.0)
    {
        return vec3(0.0);
    }
    
    float atmoDist = rayIntersectSphere(pos, sunDir, atmosphereRadiusMM);
    float t = 0.0;
    
    vec3 transmittance = vec3(1.0);
    for (float i = 0.0; i < sunTransmittanceSteps; i += 1.0)
    {
        float newT = ((i + 0.3) / sunTransmittanceSteps) * atmoDist;
        float dt = newT - t;
        t = newT;
        
        vec3 newPos = pos + t * sunDir;
        
        vec3 rayleighScattering, extinction;
        float mieScattering;
        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);
        
        transmittance *= exp(-dt * extinction);
    }
    return transmittance;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    ivec2 lut_dimensions = imageSize(transmittance_lut);

    if(gl_GlobalInvocationID.x > lut_dimensions.x || gl_GlobalInvocationID.y > lut_dimensions.y) {
        return;
    }

    float u = float(gl_GlobalInvocationID.x) / float(lut_dimensions.x);
    float v = float(gl_GlobalInvocationID.y) / float(lut_dimensions.y);
            
    float sunCosTheta = 2.0 * u - 1.0;
    float sunTheta = safeacos(sunCosTheta);
    float height = mix(groundRadiusMM, atmosphereRadiusMM, v);
    
    vec3 pos = vec3(0.0, height, 0.0);
    vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));
    
    vec3 transmittance = getSunTransmittance(pos, sunDir);

    imageStore(transmittance_lut, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance, 1.f));
}
