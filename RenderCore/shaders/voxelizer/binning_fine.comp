#version 460

/**
 * Test NDC triangles against the min/max of each bin
 *
 * The dispatch size is very specific. The y and z map to the y and z of the current cell. However, the x must be divided by 1024 to get the current cell
 */

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_EXT_debug_printf : enable

#include "shared/vertex_data.hpp"
#include "shared/triangle.hpp"

layout(set = 0, binding = 0, scalar) readonly buffer VertexOutputPositionBuffer {
    Triangle triangles[];
}; 

/**
 * Bitmask of if a triangle is in a bin
 */
layout(set = 0, binding = 1, scalar) readonly buffer TriangleBinsBitmaskBuffer {
    uint bins_bitmask[];
};

/**
 * Bitmask of if a uint in the cell bitmask has any data
 */
layout(set = 0, binding = 2, scalar) writeonly buffer TriangleCellCoarseBitmaskBuffer {
    uint cell_bitmask_coarse[];
};

/**
 * Bitmask of if a triangle is in the cell
 */
layout(set = 0, binding = 3, scalar) writeonly buffer TriangleCellBitmaskBuffer {
    uint cell_bitmask[];
};

layout(push_constant) uniform Constants {
    uint num_cells_x;
    uint num_cells_y;
    uint num_cells_z;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
};

#define NUM_THREADS 96

layout(local_size_x = NUM_THREADS, local_size_y = 1, local_size_z = 1) in;

#define TRIANGLES_PER_BIN 32768
#define UINTS_PER_BIN (TRIANGLES_PER_BIN / 32)

bool is_triangle_in_bin(Triangle triangle, vec3 voxel_min, vec3 voxel_max) {
    // Adapted from https://developer.nvidia.com/content/basics-gpu-voxelization

    vec3 aabb_max = max(triangle.v0, max(triangle.v1, triangle.v2));
    vec3 aabb_min = min(triangle.v0, min(triangle.v1, triangle.v2));

    // If the triangle's AABB doesn't overlap the bin's AABB, return false
    if(all(greaterThan(aabb_min, voxel_max)) || all(lessThan(aabb_max, voxel_min))) {
        return false;
    }

    vec3 voxelCenter = (voxel_min + voxel_max) * 0.5f;
    float voxelExtentH = voxel_max.x - voxel_min.x;

    //calculate edge vectors in voxel coordinate space
    vec3 e0 = triangle.v1 - triangle.v0;
    vec3 e1 = triangle.v2 - triangle.v1;
    vec3 e2 = triangle.v0 - triangle.v2;
    vec3 planeNormal = cross(e0, e1);

    // for testing in XY plane projection
    {
        float isFront = -sign(planeNormal.z);

        vec2 eNrm[3];
        eNrm[0] = vec2(e0.y, -e0.x) * isFront;
        eNrm[1] = vec2(e1.y, -e1.x) * isFront;
        eNrm[2] = vec2(e2.y, -e2.x) * isFront;

        vec2      an[3];
        an[0] = abs(eNrm[0]);
        an[1] = abs(eNrm[1]);
        an[2] = abs(eNrm[2]);

        // calculate signed distance offset from a voxel center

        // to the voxel vertex which has maximum signed

        // distance value.
        vec3      eOfs;
        eOfs.x = (an[0].x + an[0].y) * voxelExtentH;
        eOfs.y = (an[1].x + an[1].y) * voxelExtentH;
        eOfs.z = (an[2].x + an[2].y) * voxelExtentH;

        // calculate signed distance of each edges.
        vec3      ef;
        ef.x = eOfs.x - dot(triangle.v0.xy - voxelCenter.xy , eNrm[0]);
        ef.y = eOfs.y - dot(triangle.v1.xy - voxelCenter.xy , eNrm[1]);
        ef.z = eOfs.z - dot(triangle.v2.xy - voxelCenter.xy , eNrm[2]);

        // test is passed if all of signed distances are positive.
        if (ef.x < 0 || ef.y < 0 || ef.z < 0) {
            return false;
        }
    }
    // for testing in YZ plane projection
    {
        float isFront = -sign(planeNormal.x);

        vec2 eNrm[3];
        eNrm[0] = vec2(e0.z, -e0.y) * isFront;
        eNrm[1] = vec2(e1.z, -e1.y) * isFront;
        eNrm[2] = vec2(e2.z, -e2.y) * isFront;

        vec2      an[3];
        an[0] = abs(eNrm[0]);
        an[1] = abs(eNrm[1]);
        an[2] = abs(eNrm[2]);

        // calculate signed distance offset from a voxel center

        // to the voxel vertex which has maximum signed

        // distance value.
        vec3      eOfs;
        eOfs.x = (an[0].x + an[0].y) * voxelExtentH;
        eOfs.y = (an[1].x + an[1].y) * voxelExtentH;
        eOfs.z = (an[2].x + an[2].y) * voxelExtentH;

        // calculate signed distance of each edges.
        vec3      ef;
        ef.x = eOfs.x - dot(triangle.v0.yz - voxelCenter.yz , eNrm[0]);
        ef.y = eOfs.y - dot(triangle.v1.yz - voxelCenter.yz , eNrm[1]);
        ef.z = eOfs.z - dot(triangle.v2.yz - voxelCenter.yz , eNrm[2]);

        // test is passed if all of signed distances are positive.
        if (ef.x < 0 || ef.y < 0 || ef.z < 0) {
            return false;
        }
    }
    // for testing in XZ plane projection
    {
        float isFront = -sign(planeNormal.y);

        vec2 eNrm[3];
        eNrm[0] = vec2(e0.z, -e0.x) * isFront;
        eNrm[1] = vec2(e1.z, -e1.x) * isFront;
        eNrm[2] = vec2(e2.z, -e2.x) * isFront;

        vec2      an[3];
        an[0] = abs(eNrm[0]);
        an[1] = abs(eNrm[1]);
        an[2] = abs(eNrm[2]);

        // calculate signed distance offset from a voxel center

        // to the voxel vertex which has maximum signed

        // distance value.
        vec3      eOfs;
        eOfs.x = (an[0].x + an[0].y) * voxelExtentH;
        eOfs.y = (an[1].x + an[1].y) * voxelExtentH;
        eOfs.z = (an[2].x + an[2].y) * voxelExtentH;

        // calculate signed distance of each edges.
        vec3      ef;
        ef.x = eOfs.x - dot(triangle.v0.xz - voxelCenter.xz , eNrm[0]);
        ef.y = eOfs.y - dot(triangle.v1.xz - voxelCenter.xz , eNrm[1]);
        ef.z = eOfs.z - dot(triangle.v2.xz - voxelCenter.xz , eNrm[2]);

        // test is passed if all of signed distances are positive.
        if (ef.x < 0 || ef.y < 0 || ef.z < 0) {
            return false;
        }
    }

    // Otherwise return true
    return true;
}

void main() {
    /**
     * Here's how it works:
     *
     * First, we determine which cell we're testing triangles for. The threads are laid out such that multiple cells 
     * are along the X. There's a max of 32k triangles per bin. The bins are represented with 1k uints, each uint is a
     * mask for 32 triangles. Each subgroup is 32 threads wide, and we have 3 subgroups in our workgroups. This all 
     * adds up to mean that one workgroup has 96 threads which process 32 triangles each - each workgroup processes 
     * 3072 triangles. We need 10.9 workgroups to process one bin's worth of triangles. We dispatch NumCells * 11 
     * workgroups in the X direction
     *
     * Each thread reads the uint corresponding to its place in the bin's mask. If any of those 32 triangles are in the
     * bin, it tests them against its cell. If the triangle is in the cell, it marks the tirangle's bit in a new 
     * bitmask
     *
     * We also build a coarse cell bitmask from the threads in the subgroup. This has one bit marking if a uint in the
     * cell bitmask has any bits set. This lets the rasterization shaders quickly skip empty parts of the cell bitmask
     */

    // HARDCODED DEBUGGING HACKS
    uvec3 WORK_GROUP_ID = uvec3(140, 4, 8);

    uint group_offset_in_bin = WORK_GROUP_ID.x % 11;

    // Local index of this thread within the subgroup
    uint local_index = gl_SubgroupInvocationID + gl_SubgroupID * gl_SubgroupSize;
    // Index of the mask in the bin that this thread should look at
    uint mask_offset = group_offset_in_bin * NUM_THREADS + local_index;

    uvec3 cell_id = uvec3(WORK_GROUP_ID) / uvec3(11, 1, 1);
    uint cell_index = cell_id.x + cell_id.y * num_cells_x + cell_id.z * num_cells_x * num_cells_y;
    uint cell_offset_in_mask = cell_index * UINTS_PER_BIN;

    vec3 num_cells = vec3(num_cells_x, num_cells_y, num_cells_z);    
    vec3 cell_min = vec3(cell_id) / num_cells;
    vec3 cell_max = cell_min + (1.f / num_cells);

    uvec3 num_bins = uvec3(num_cells_x + 3, num_cells_y + 3, num_cells_z + 3) / 4;
    uvec3 bin_id = (cell_id + 3) / 4;
    debugPrintfEXT("bin_id=%d %d %d\n", bin_id.x, bin_id.y, bin_id.z);
    uint bin_index = bin_id.x + bin_id.y * num_bins.x + bin_id.z * num_bins.x * num_bins.y;
    uint bin_offset_in_mask = bin_index * UINTS_PER_BIN;

    bool group_bin_to_tile = false;

    if(mask_offset < UINTS_PER_BIN) {
        debugPrintfEXT("Reading from bins_bitmask[%d + %d]\n", bin_offset_in_mask, mask_offset);
        uint current_bin_bits = bins_bitmask[bin_offset_in_mask + mask_offset];

        uint cell_mask = 0; // Mask of triangles in this cell
        while(current_bin_bits > 0) {
            int bit = findLSB(current_bin_bits);
            current_bin_bits &= ~uint(1 << bit);
            
            uint triangle_index = mask_offset * 32 + bit;
            Triangle triangle = triangles[triangle_index];
            if(is_triangle_in_bin(triangle, cell_min, cell_max)) {
                cell_mask |= (1 << bit);
            }
        }

        cell_bitmask[cell_offset_in_mask + mask_offset] = cell_mask;
        group_bin_to_tile = cell_mask != 0u;
    }

    // High level mask of which uints in the bin have at least one bit in ths cell
    uvec4 subgroup_bin_result = subgroupBallot(group_bin_to_tile);
    if(subgroupElect() && mask_offset < UINTS_PER_BIN) {
        // Store the high level mask to the coarse bins
        uint cell_offset_in_coarse_mask = cell_offset_in_mask / 32;
        uint local_offset_in_coarse_mask = mask_offset / 32;

        if(gl_SubgroupSize == 16) {
            // Mali
            uint in_bin_mask = subgroup_bin_result.x;
            if(gl_SubgroupInvocationID % 2 == 1) {
                in_bin_mask = in_bin_mask << 16;
            }
            atomicOr(cell_bitmask_coarse[cell_offset_in_coarse_mask + local_offset_in_coarse_mask], in_bin_mask);

        } else if(gl_SubgroupSize == 32) {
            // Nvidia
            cell_bitmask_coarse[cell_offset_in_coarse_mask + local_offset_in_coarse_mask] = subgroup_bin_result.x;
        }
        // TODO: Support a subgroup size of 64 for AyyyyyMD
    }
}
