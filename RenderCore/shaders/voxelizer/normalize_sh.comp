#version 460

layout(set = 0, binding = 0, r32ui) uniform readonly uimage3D voxels_xy;
layout(set = 0, binding = 1, r32ui) uniform readonly uimage3D voxels_zw;

layout(set = 0, binding = 2, rgba16f) uniform writeonly image3D voxels;

layout(push_constant) uniform Constants {
    uint padding0;
    uint padding1;
    uint padding2;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
} push_constants;

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

ivec2 unpackInt2x16(uint value) {
    ivec2 result;
    result.x = int((value >> 16) & 0x00007FFF);
    result.y = int(value & 0x00007FFF);

    if((value & 0x80000000) != 0) {
        result.x = abs(result.x) * -1;
    }

    if((value & 0x00008000) != 0) {
        result.y = abs(result.y) * -1;
    }

    return result;
}

void main() {
    ivec3 cell = ivec3(gl_GlobalInvocationID);

    uint sh_xy = imageLoad(voxels_xy, cell).x;
    uint sh_zw = imageLoad(voxels_zw, cell).x;

    ivec4 sh_fixed;
    sh_fixed.xy = unpackInt2x16(sh_xy);
    sh_fixed.zw = unpackInt2x16(sh_zw);

    vec4 sh = vec4(sh_fixed) / 8.f;
    if(length(sh) > 0) {
        sh = normalize(sh);
    }

    imageStore(voxels, cell, sh);
}
