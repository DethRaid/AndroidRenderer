#version 460

/**
 * Transform triangles
 */
 
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "shared/primitive_data.hpp"
#include "shared/vertex_data.hpp"
#include "shared/triangle.hpp"

#include "common/spherical_harmonics.glsl"

layout(set = 0, binding = 0, scalar) readonly buffer VertexPositionBuffer {
    vec3 positions[];
};

layout(set = 0, binding = 1, scalar) readonly buffer VertexDataBuffer {
    StandardVertexData vertex_data[];
};

layout(set = 0, binding = 2, std430) readonly buffer IndexBuffer {
    uint indices[];
};

layout(set = 0, binding = 3, std140) uniform VoxelBoundsBuffer {
    mat4 world_to_bounds;
};

layout(set = 0, binding = 4, scalar) writeonly buffer VertexOutputPositionBuffer {
    Triangle triangles[];
};

layout(set = 0, binding = 5, std430) writeonly buffer VertexOutputSHBuffer {
    vec4 triangle_sh[];
};

layout(push_constant) uniform Constants {
    uint first_vertex;
    uint first_index;
    uint num_triangles;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
};

layout(local_size_x = 96, local_size_y = 1, local_size_z = 1) in;

void main() {
    if(gl_GlobalInvocationID.x < num_triangles) {
        uint triangle_id = gl_GlobalInvocationID.x;
        uint provoking_index = triangle_id * 3;

        // Pull this triangle and transform it
        uint index0 = first_vertex + indices[first_index + provoking_index];
        uint index1 = first_vertex + indices[first_index + provoking_index + 1];
        uint index2 = first_vertex + indices[first_index + provoking_index + 2];

        vec4 position0 = vec4(positions[index0], 1.f);
        vec4 position1 = vec4(positions[index1], 1.f);
        vec4 position2 = vec4(positions[index2], 1.f);

        // TODO: Programmable vertex shader?

        position0 = world_to_bounds * position0;
        position0 /= position0.w;
        position1 = world_to_bounds * position1;
        position1 /= position1.w;
        position2 = world_to_bounds * position2;
        position2 /= position2.w;

        triangles[triangle_id].v0 = position0.xyz;
        triangles[triangle_id].v1 = position1.xyz;
        triangles[triangle_id].v2 = position2.xyz;
        
        // Average the triangle's normal
        // Probably wrong, possibly useful
        vec3 normal = vertex_data[index0].normal;
        normal += vertex_data[index1].normal;
        normal += vertex_data[index2].normal;

        triangle_sh[triangle_id] = dir_to_sh(normalize(normal));
    }
}   
