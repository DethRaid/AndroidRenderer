#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference_uvec2 : enable

#define A_GPU 1
#define A_GLSL 1
#define A_HALF 1
#define SPD_LINEAR_SAMPLER 1
#define SPD_PACKED_ONLY 1

#include "spd/ffx_a.h"

layout(buffer_reference, scalar, buffer_reference_align = 4) coherent buffer SpdGlobalAtomicBuffer {
    uint counter[];
};

layout(set = 0, binding = 0) uniform sampler2D imgSrc;

layout(set = 0, binding = 1, r16f) uniform coherent image2D imgDst[12];

layout(push_constant) uniform PushConstants {
    uint num_work_groups;
    uint num_mips;
    uvec2 work_group_offset;
    SpdGlobalAtomicBuffer spdGlobalAtomic;
    uint padding6;
    uint padding7;
};

shared AU1 spdCounter;
shared AH4 spdIntermediate[16][16];

vec2 invInputSize;

AH4 SpdLoadSourceImageH(ASU2 p, AU1 slice) {
   AF2 textureCoord = p * invInputSize + invInputSize;
   return AH4(textureLod(imgSrc, textureCoord, 0.0));
}

AH4 SpdLoadH(ASU2 p, AU1 slice) { return AH4(imageLoad(imgDst[5], p)); }
void SpdStoreH(ASU2 p, AH4 value, AU1 mip, AU1 slice) { imageStore(imgDst[mip], p, AH4(value)); }

void SpdIncreaseAtomicCounter(AU1 slice) { spdCounter = atomicAdd(spdGlobalAtomic.counter[slice], 1); }
AU1 SpdGetAtomicCounter() { return spdCounter; }
void SpdResetAtomicCounter(AU1 slice) { spdGlobalAtomic.counter[slice] = 0; }

AH4 SpdLoadIntermediateH(AU1 x, AU1 y) { return spdIntermediate[x][y]; }
void SpdStoreIntermediateH(AU1 x, AU1 y, AH4 value) { spdIntermediate[x][y] = value; }

AH4 SpdReduce4H(AH4 v0, AH4 v1, AH4 v2, AH4 v3) { return (v0 + v1 + v2 + v3) * AH1(0.25); }

#include "spd/ffx_spd.h"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    invInputSize = vec2(1.f) / textureSize(imgSrc, 0);

    SpdDownsampleH(
        AU2(gl_WorkGroupID.xy), 
        AU1(gl_LocalInvocationIndex),
        AU1(num_mips), 
        AU1(num_work_groups), 
        AU1(gl_WorkGroupID.z));
}
